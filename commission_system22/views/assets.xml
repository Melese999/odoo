<odoo>
    <template id="commission_drawing_assets" name="Commission Drawing Assets" inherit_id="web.assets_backend">
        <xpath expr="//script[last()]" position="after">
            <script type="text/javascript">
                document.addEventListener('DOMContentLoaded', function() {
                // Only execute on our specific form
                if (!document.querySelector('form[data-model="commission.sketch.wizard"]')) {
                return;
                }

                const canvas = document.getElementById('sketch_canvas');
                if (!canvas) {
                return; // The view is not this one, so we stop here.
                }
                const ctx = canvas.getContext('2d');
                const clearButton = document.getElementById('clear_drawing_button');
                const sketchImageField = document.querySelector('input[name="sketch_image"]');

                let isDrawing = false;
                let lastX = 0;
                let lastY = 0;

                function setCanvasDimensions() {
                const container = document.getElementById('drawing_area_container');
                canvas.width = container.offsetWidth - 2; // -2 for borders
                canvas.height = 400; // Fixed height for consistency
                ctx.lineWidth = 5;
                ctx.lineJoin = 'round';
                ctx.lineCap = 'round';
                ctx.strokeStyle = '#000000';
                }

                setCanvasDimensions();
                window.addEventListener('resize', setCanvasDimensions);

                function handleStart(e) {
                e.preventDefault();
                isDrawing = true;
                const rect = canvas.getBoundingClientRect();
                const x = (e.clientX || e.touches[0].clientX) - rect.left;
                const y = (e.clientY || e.touches[0].clientY) - rect.top;
                [lastX, lastY] = [x, y];
                }

                function handleMove(e) {
                e.preventDefault();
                if (!isDrawing) return;
                const rect = canvas.getBoundingClientRect();
                const x = (e.clientX || e.touches[0].clientX) - rect.left;
                const y = (e.clientY || e.touches[0].clientY) - rect.top;
                ctx.beginPath();
                ctx.moveTo(lastX, lastY);
                ctx.lineTo(x, y);
                ctx.stroke();
                [lastX, lastY] = [x, y];
                }

                function handleEnd() {
                isDrawing = false;
                const dataURL = canvas.toDataURL('image/png');
                const base64Data = dataURL.split(',')[1];
                sketchImageField.value = base64Data;
                }

                canvas.addEventListener('mousedown', handleStart);
                canvas.addEventListener('mousemove', handleMove);
                canvas.addEventListener('mouseup', handleEnd);
                canvas.addEventListener('mouseout', handleEnd);

                canvas.addEventListener('touchstart', handleStart);
                canvas.addEventListener('touchmove', handleMove);
                canvas.addEventListener('touchend', handleEnd);
                canvas.addEventListener('touchcancel', handleEnd);

                clearButton.addEventListener('click', function() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                sketchImageField.value = '';
                });
                });
            </script>
        </xpath>
    </template>
</odoo>